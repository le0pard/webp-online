<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="ie=edge" />
    <meta name="viewport"
          content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="keywords" content="<%= default_keywords_helper %>" />
    <meta name="description" content="<%= default_description_helper %>" />
    <meta name="theme-color" content="#fdf6e3" />
    <link rel="manifest" href="/manifest.json" />
    <link type="text/plain" rel="author" href="/humans.txt" />
    <link rel="preload" href="<%= asset_path('app.css') %>" as="style" />
    <title>
      <%= current_page.data.title || "Webp Online converter" %>
    </title>
    <%= stylesheet_pack_tag "app" %>

    <!-- For third-generation iPad with high-resolution Retina display: -->
    <link rel="apple-touch-icon-precomposed" sizes="152x152" href="/images/favicons/apple-touch-icon-152x152-precomposed.png" />
    <!-- For third-generation iPad with high-resolution Retina display: -->
    <link rel="apple-touch-icon-precomposed" sizes="144x144" href="/images/favicons/apple-touch-icon-144x144-precomposed.png" />
    <!-- For iPhone with high-resolution Retina display: -->
    <link rel="apple-touch-icon-precomposed" sizes="120x120" href="/images/favicons/apple-touch-icon-120x120-precomposed.png" />
    <!-- For iPhone with high-resolution Retina display: -->
    <link rel="apple-touch-icon-precomposed" sizes="114x114" href="/images/favicons/apple-touch-icon-114x114-precomposed.png" />
    <!-- For first- and second-generation iPad: -->
    <link rel="apple-touch-icon-precomposed" sizes="76x76" href="/images/favicons/apple-touch-icon-76x76-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" sizes="72x72" href="/images/favicons/apple-touch-icon-72x72-precomposed.png" />
    <link rel="apple-touch-icon-precomposed" sizes="60x60" href="/images/favicons/apple-touch-icon-60x60-precomposed.png" />
    <!-- For non-Retina iPhone, iPod Touch, and Android 2.1+ devices: -->
    <link rel="apple-touch-icon-precomposed" href="/images/favicons/apple-touch-icon-precomposed.png" />
    <!-- favicon -->
    <link rel="shortcut icon" href="/images/favicons/favicon.png" />
    <link rel="icon" type="image/ico" href="/images/favicons/favicon.ico" />

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
      ga('create', 'UA-7068020-12', 'leopard.in.ua');
      ga('send', 'pageview');
    </script>
  </head>
  <body>
    <%= yield %>
    <%= javascript_pack_tag "app" %>
    

    <input id="fileUpload" type="file" />
<input id="imgQuality" type="range" name="volume" min="10" max="100" step="1" />
<img id="imgResult" />
<a id="saveImage" href="#">Save</a>

<script>
  var Module = {
    onRuntimeInitialized: async _ => {
      const api = {
        version: Module.cwrap('version', 'number', []),
        create_buffer: Module.cwrap('create_buffer', 'number', ['number', 'number']),
        destroy_buffer: Module.cwrap('destroy_buffer', '', ['number']),
        encode: Module.cwrap('encode', '', ['number', 'number', 'number', 'number']),
        get_result_pointer: Module.cwrap('get_result_pointer', 'number', []),
        get_result_size: Module.cwrap('get_result_size', 'number', []),
        free_result: Module.cwrap('free_result', '', ['number']),
      };


      async function loadImage(imgBlob) {
        // Load image
        const img = await createImageBitmap(imgBlob);
        // Make canvas same size as image
        const canvas = document.createElement('canvas');
        canvas.width = img.width;
        canvas.height = img.height;
        // Draw image onto canvas
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0);
        return ctx.getImageData(0, 0, img.width, img.height);
      }

      const imgQuality = document.getElementById('imgQuality');

      const fileInput = document.getElementById('fileUpload');

      const saveLink = document.getElementById('saveImage');

      let blobURL = null;

      const convertImg = () => {
        const reader = new FileReader();

        reader.onload = async () => {
          const imgBlob = await fetch(reader.result).then(resp => resp.blob());
          console.log(api.version());
          const image = await loadImage(imgBlob);
          const p = api.create_buffer(image.width, image.height);
          Module.HEAP8.set(image.data, p);
          console.log('buffer created');
          api.encode(p, image.width, image.height, parseInt(imgQuality.value, 10));
          console.log('buffer encoded');
          const resultPointer = api.get_result_pointer();
          const resultSize = api.get_result_size();
          const resultView = new Uint8Array(Module.HEAP8.buffer, resultPointer, resultSize);
          const result = new Uint8Array(resultView);
          api.free_result(resultPointer);
          const blob = new Blob([result], { type: 'image/webp' });
          blobURL = URL.createObjectURL(blob);
          const img = document.getElementById('imgResult');
          img.src = blobURL;

          saveLink.href = blobURL;
          saveLink.download = 'image.webp';

          api.destroy_buffer(p);
        };

        reader.readAsDataURL(fileInput.files[0]);
      }

      // window.URL.revokeObjectURL(url);

      fileInput.addEventListener('change', function (e) {
        if (fileInput.files && fileInput.files[0]) {
          convertImg();
        }
      });

      imgQuality.addEventListener('change', function (e) {
        if (fileInput.files && fileInput.files[0]) {
          convertImg();
        }
      });
    }
  }
</script>
<script src="/webp.js"></script>
  </body>
</html>
